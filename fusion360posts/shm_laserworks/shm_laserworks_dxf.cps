description = "SHMLaser DXF";
vendor = "SHMakerspace Ltd";
vendorUrl = "http://www.shmakerspace.org";
legal = "Copyright (C) 2017 by SHMakerspace Ltd.";
certificationLevel = 2;

longDescription = "This post outputs the toolpath in the DXF (AutoCAD) file format.";

capabilities = CAPABILITY_INTERMEDIATE | CAPABILITY_MILLING | CAPABILITY_JET;
extension = "dxf";
mimetype = "application/dxf";
setCodePage("utf-8");

minimumCircularSweep = toRad(0.01);
maximumCircularSweep = toRad(180);
allowHelicalMoves = false;
allowedCircularPlanes = undefined; // only XY arcs

properties = {
};

var xyzFormat = createFormat({
	decimals: (unit == MM ? 3 : 4)
});
var nFormat = createFormat({
	decimals: 9
});
var angleFormat = createFormat({
	decimals: 6,
	scale: DEG
});

var layer = 1; // the layer to output into

function onComment(text) {
  writeln("999");
  writeln(text);
}

function onOpen() {
	xyzFormat = createFormat({decimals:(unit == MM ? 3 : 4), scale:(unit == MM) ? 1 : 25.4});
	onComment("Generated by SHMLaser");

	var d = new Date();
	onComment("Generated at " + d);

	writeln("0");
	writeln("SECTION");

	writeln("2");
	writeln("HEADER");

	writeln("9");
	writeln("$ACADVER");
	writeln("1");
	writeln("AC1006");

	writeln("9");
	writeln("$ANGBASE");
	writeln("50");
	writeln("0"); // along +X

	writeln("9");
	writeln("$ANGDIR");
	writeln("70");
	writeln("0"); // ccw arcs

	writeln("0");
	writeln("ENDSEC");

	writeln("0");
	writeln("SECTION");
	writeln("2");
	writeln("BLOCKS");
	writeln("0");
	writeln("ENDSEC");

	writeln("0");
	writeln("SECTION");
	writeln("2");
	writeln("ENTITIES");
}

function onSection() {
	var remaining = currentSection.workPlane;
	if (!isSameDirection(remaining.forward, new Vector(0, 0, 1))) {
		error(localize("Tool orientation is not supported."));
		return;
	}
	setRotation(remaining);
}

function onParameter(name, value) {}

function onDwell(seconds) {}

function onCycle() {}

function onCyclePoint(x, y, z) {}

function onCycleEnd() {}

function writeLine(x, y, z, feed) {
	if (radiusCompensation != RADIUS_COMPENSATION_OFF) {
		error("Compensation type 'in control' is not supported. Change it to 'in computer' in the Contour settings");
		return;
	}

	// We do not want to output any of the movement-only paths
	if(movement === MOVEMENT_RAPID
	|| movement === MOVEMENT_LEAD_IN
	|| movement === MOVEMENT_LEAD_OUT){
		return;
	}

	// We hack in some DXF colours based on the feed-rate
	var colour = feed;
	if(colour === null || colour === undefined || colour === 0) {
		colour = 1;
	}

	// The first coordinate for the line comes from wherever F360 says the head currently is
	var start = getCurrentPosition();

	// Write the DXF entity
	writeln("0");
	writeln("LINE");
	writeln("8"); // layer
	writeln(layer);
	writeln("62"); // color
	writeln(colour);

	writeln("10"); // X
	writeln(xyzFormat.format(start.x));
	writeln("20"); // Y
	writeln(xyzFormat.format(start.y));
	writeln("30"); // Z
	writeln(xyzFormat.format(0));

	writeln("11"); // X
	writeln(xyzFormat.format(x));
	writeln("21"); // Y
	writeln(xyzFormat.format(y));
	writeln("31"); // Z
	writeln(xyzFormat.format(0));
}

function onRapid(x, y, z) {
	writeLine(x, y, z, 1);
}

function onLinear(x, y, z, feed) {
	writeLine(x, y, z, feed);
}

function onRapid5D(x, y, z, dx, dy, dz) {
	writeLine(x, y, z, 1);
}

function onLinear5D(x, y, z, dx, dy, dz, feed) {
	onLinear(x, y, z, 1);
}

function onCircular(clockwise, cx, cy, cz, x, y, z, feed) {

	if (getCircularPlane() != PLANE_XY) {
		// start and end angle reference is unknown
		linearize(tolerance);
		return;
	}

	if (radiusCompensation != RADIUS_COMPENSATION_OFF) {
		error("Compensation type 'in control' is not supported. Change it to 'in computer' in the Contour settings");
		return;
	}

	// We do not want to output any of the movement-only paths
	if(movement === MOVEMENT_RAPID
	|| movement === MOVEMENT_LEAD_IN
	|| movement === MOVEMENT_LEAD_OUT){
		return;
	}

	// We hack in some DXF colours based on the feed-rate
	var colour = feed;
	if(colour === null || colour === undefined || colour === 0) {
		colour = 1;
	}

	// Write the DXF entity
	writeln("0");
	writeln("ARC");
	writeln("8"); // layer
	writeln(layer);
	writeln("62"); // color
	writeln(colour);

	writeln("10"); // X
	writeln(xyzFormat.format(cx));
	writeln("20"); // Y
	writeln(xyzFormat.format(cy));
	writeln("30"); // Z
	writeln(xyzFormat.format(0));

	writeln("40"); // radius
	writeln(xyzFormat.format(getCircularRadius()));

	var start = getCurrentPosition();
	var startAngle = Math.atan2(start.y - cy, start.x - cx);
	var endAngle = Math.atan2(y - cy, x - cx);

	if (clockwise) { // we must be ccw
		var temp = startAngle;
		startAngle = endAngle;
		endAngle = temp;
	}
	writeln("50"); // start angle
	writeln(angleFormat.format(startAngle));
	writeln("51"); // end angle
	writeln(angleFormat.format(endAngle));

	if (getCircularPlane() != PLANE_XY) {
		var n = getCircularNormal();
		writeln("210"); // X
		writeln(nFormat.format(n.x));
		writeln("220"); // Y
		writeln(nFormat.format(n.y));
		writeln("230"); // Y
		writeln(nFormat.format(n.z));
	}
}

function onCommand() {}

function onSectionEnd() {}

function onClose() {
	writeln("0");
	writeln("ENDSEC");
	writeln("0");
	writeln("EOF");
}
